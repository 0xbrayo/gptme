name: 'gptme-bot'
description: 'A composite action for the gptme-bot workflow'
inputs:
  openai_api_key:
    description: 'OpenAI API Key'
    required: true
  github_token:
    description: 'GitHub Token'
    required: true
  issue_number:
    description: 'Issue Number'
    required: true
  comment_body:
    description: 'Comment Body'
    required: true
  comment_id:
    description: 'Comment ID'
    required: true
  repo_name:
    description: 'Repository Name'
    required: true
  user_name:
    description: 'User Name'
    required: true
  branch_base:
    description: 'Base Branch'
    required: true
  is_pr:
    description: 'Is Pull Request'
    required: true
  branch_name:
    description: 'Branch Name'
    required: true
  allowlist:
    description: 'Comma-separated list of GitHub usernames allowed to trigger the bot'
    required: true

runs:
  using: "composite"
  steps:
    - name: Detect gptme command
      id: detect_command
      shell: bash
      env:
        COMMENT_BODY: ${{ inputs.comment_body }}
      run: |
        # Check if the comment starts with "@gptme"
        if [[ "$COMMENT_BODY" == "@gptme "* ]]; then
          # Extract the command
          GPTME_COMMAND=${COMMENT_BODY#"@gptme "}
          {
            echo "gptme_command<<EOFMAGIC"
            echo $GPTME_COMMAND
            echo "EOFMAGIC"
          } >> $GITHUB_OUTPUT
        fi

    - name: Check allowlist
      if: steps.detect_command.outputs.gptme_command
      shell: bash
      run: |
        IFS=',' read -ra ALLOWLIST <<< "${{ inputs.allowlist }}"
        if [[ ! " ${ALLOWLIST[@]} " =~ " ${{ inputs.user_name }} " ]]; then
          echo "Error: Author ${{ inputs.user_name }} is not on the allowlist."
          exit 1
        fi

    - name: React to comment
      if: steps.detect_command.outputs.gptme_command
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        gh api /repos/${{ inputs.user_name }}/${{ inputs.repo_name }}/issues/comments/${{ inputs.comment_id }}/reactions -X POST -f content='+1'

    - name: Checkout
      if: steps.detect_command.outputs.gptme_command
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Pull Docker image
      shell: bash
      run: docker pull ghcr.io/erikbjare/gptme:latest

    - name: Checkout PR branch if comment is on a PR
      id: checkout_branch
      if: steps.detect_command.outputs.gptme_command
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        # Fetch details about the "issue" the comment is on
        DATA=$(gh api /repos/${{ github.repository }}/issues/${{ inputs.issue_number }})

        # Extract whether this "issue" is a PR and
        IS_PR=${{ inputs.is_pr }}

        # If this is a PR, checkout its branch
        if [[ "$IS_PR" != "null" ]]; then
          # Fetch details about the PR the comment is on
          DATA=$(gh api /repos/${{ github.repository }}/pulls/${{ inputs.issue_number }})

          # Get the PR's branch name
          BRANCH_NAME=${{ inputs.branch_name }}
          git fetch origin $BRANCH_NAME
          git checkout $BRANCH_NAME
        else
          # Create a new branch and push changes
          BRANCH_NAME="gptme-bot-changes-$(date +'%Y%m%d%H%M%S')"
          git checkout -b $BRANCH_NAME
        fi
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Run gptme
      if: steps.detect_command.outputs.gptme_command
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GPTME_COMMAND: ${{ steps.detect_command.outputs.gptme_command }}
        ISSUE_NUMBER: ${{ inputs.issue_number }}
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
      run: |
        gh issue view ${{ inputs.issue_number }} > issue.md
        gh issue view ${{ inputs.issue_number }} -c > comments.md
        perl -0777 -i -pe 's/\n<details>.*?<\/details>//sg' issue.md comments.md

        # strip long <details>...</details> from issue.md and comments.md
        # TODO: upload logs elsewhere and link instead of dumping
        perl -0777 -i -pe 's/\n<details>.*?<\/details>//sg' issue.md
        perl -0777 -i -pe 's/\n<details>.*?<\/details>//sg' comments.md

        # run gptme with the extracted command and save logs
        docker run --rm \
          -v $(pwd):/workspace \
          -w /workspace \
          -e OPENAI_API_KEY=$OPENAI_API_KEY \
          ghcr.io/erikbjare/gptme:latest \
          --non-interactive \
          "$GPTME_COMMAND" issue.md comments.md

        # remove tmp files so that they do not get committed
        rm issue.md comments.md

        # stage changes
        git add -A

    - name: Generate commit message
      if: steps.detect_command.outputs.gptme_command
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
      run: |
        # generate commit message
        docker run --rm \
          -v $(pwd):/workspace \
          -w /workspace \
          -e OPENAI_API_KEY=$OPENAI_API_KEY \
          ghcr.io/erikbjare/gptme:latest \
          --non-interactive \
          "Run 'git diff --staged' to inspect what has changed." "-" "Write a commit message for it to 'message.txt'. Use the 'conventional commits' style."

    - name: Commit, push, comment
      if: steps.detect_command.outputs.gptme_command
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        # Read and format log
        ./scripts/format_log.sh ~/.local/share/gptme/logs/*/conversation.jsonl > log.txt

        RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        COMMENT_URL="https://github.com/${{ github.repository }}/issues/${{ inputs.issue_number }}#issuecomment-${{ inputs.comment_id }}"

        # commit message & description
        COMMIT_MSG="$(cat message.txt || echo 'no commit message')"
        COMMIT_DESC="\`gptme '$GPTME_COMMAND'\`

        Triggered by: $COMMENT_URL
        Run: $RUN_URL"

        # commit message with description
        COMMIT_MSG_FULL="$COMMIT_MSG

        $COMMIT_DESC"

        # commit message with description and log
        COMMIT_MSG_FULL_WITH_LOG="$COMMIT_MSG_FULL

        <details>
        <summary>Log</summary>
        <pre>$(cat log.txt || echo 'could not get log')</pre>
        </details>"

        git config user.name "gptme-bot"
        git config user.email "gptme-bot@superuserlabs.org"

        git commit -m "$COMMIT_MSG_FULL"

        # Push changes to the PR branch
        git push -u origin $BRANCH_NAME

        if [[ $ISSUE_TYPE == "pull_request" ]]; then
          # Comment on the PR
          echo "Changes have been pushed to this pull request." | gh pr comment $ISSUE_NUMBER -R $USER_NAME/$REPO_NAME --body-file=-
        else
          # Some say this helps! https://github.com/cli/cli/issues/2691#issuecomment-1289521962
          sleep 1

          # Create a PR
          PR_URL=$(gh pr create --title "$COMMIT_MSG" --body "$COMMIT_MSG_FULL_WITH_LOG" --repo $USER_NAME/$REPO_NAME | grep -o 'https://github.com[^ ]*')
          # These are redundant/implied: --base $BRANCH_BASE --head $USER_NAME:$BRANCH_NAME

          # Comment on the issue with the PR link
          echo "A pull request has been created for this issue: $PR_URL" | gh issue comment $ISSUE_NUMBER -R $USER_NAME/$REPO_NAME --body-file=-
        fi

    - name: Report error
      if: failure()
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        ISSUE_NUMBER: ${{ inputs.issue_number }}
        REPO_NAME: ${{ inputs.repo_name }}
        USER_NAME: ${{ inputs.user_name }}
      run: |
        RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        MESSAGE="I'm sorry, I could not fulfill your request. Please check the [log of this run]($RUN_URL) for more information."
        if [[ -f log.txt ]]; then
          MESSAGE+="
        <details>
        <summary>Conversation log</summary>
        <pre>$(cat log.txt)</pre>
        </details>"
        fi
        echo "$MESSAGE" | gh issue comment $ISSUE_NUMBER -R $USER_NAME/$REPO_NAME --body-file=-
